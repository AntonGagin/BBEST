ind.min <- which(abs(data$x-x.min)==min(abs(data$x-x.min)))
lambda[ind.min:ind.max] <- a0 * data$x[ind.min:ind.max] + b0
}
data$lambda <- lambda
return(data)
}
###
set.SB <- function(data, SB=NA, n.atoms=NA, scatter.length=NA, DW=NA, fit=FALSE, oneDW=TRUE, DW.lim=c(0, 0.05)){
if(is.na(SB[1])){
if(is.na(n.atoms) || is.na(scatter.length))
stop("Please provide SB or parameters n.atoms and scatter.length\n")
if(is.na(DW) && !fit)
stop("Please provide DW or set fit=TRUE\n")
if(fit==TRUE){
data$fitDW <- list(n.atoms=n.atoms, scatter.length=scatter.length, oneDW=oneDW, DW.lim=DW.lim)
SB <- rep(0, length(data$x))
}
else{
data$fitDW <- NULL
if(length(DW)==1) DW <- rep(DW, length(n.atoms))
N_total <- sum(n.atoms)
f.av2 <- (sum(n.atoms*scatter.length)/N_total)^2
f2.av <- sum(n.atoms*scatter.length^2)/N_total
expDW <- 0
for(j in 1:length(data$x))
expDW[j] <- sum(n.atoms*scatter.length^2*exp(-DW*data$x[j]^2)/N_total/f2.av)
L <- (f.av2-f2.av)/f.av2
SB <- 1-expDW*(1-L)
}
}
data$SB <- SB
return(data)
}
###
set.Gr <- function(data, r1=seq(0, 1, 0.005), r2=NA, rho.0,
type1="gaussianNoise", type2=NA, sigma.f=NA, l=NA){
K.DI <- list()
KG.inv <- matrix.FT1 <- matrix.FT2 <- sigma.r <- bkg.r <- ff <- D<- NA
K.DI$inv <- K.DI$det <- NA
if(is.na(type1))
cat("No constraints on G(r) behaviour included. \n")
else if(type1=="gaussianNoise"){
# noise in r-space
matrix.FT1 <- sineFT.matrix(Q=data$x, r=r1)
delta <- c(diff(data$x)[1], diff(data$x))
sigma.r <- 0
cat("Calculating r-space noise... \n")
for(j in 1:length(r1)){
sigma.r[j]<-0
for(i in 1:length(data$x)){
sigma.r[j] <- sigma.r[j] + (2/pi*delta[i]*data$x[i]*sin(data$x[i]*r1[j])*data$sigma[i])^2
}
sigma.r[j] <- sqrt(sigma.r[j])
}
# avoid dividing by zero
if(sigma.r[1]==0)
sigma.r[1] <- sigma.r[2]
cat("Calculating FT of the experimental data... \n")
bkg.r <- sineFT(f.Q=data$y-1, Q=data$x, r=r1) + 4 * pi * rho.0 * r1
# SB should be excluded from bkg estimation
# by setting term SB!
# data$y=S(Q)=F(Q)+1!
}
else if(type1=="correlatedNoise"){
matrix.FT1 <- sineFT.matrix(Q=data$x, r=r1)
cat("Calculating noise covariance matrix in r-space... \n")
KG <- noise.cov.matrix.r(r=r1, Q=data$x, sigma=data$sigma)
diag(KG) <- diag(KG) + abs(min(eigen(KG)$values)) * 1e4   # avoid singularity
KG.inv <- solve(KG)
cat("Calculating FT of the experimental data... \n")
bkg.r <- sineFT(f.Q=data$y-1, Q=data$x, r=r1) + 4 * pi * rho.0 * r1
}
else
stop("Wrong type of low-r Gr contribution to likelihood. Should be either 'gaussianNoise' or 'correlatedNoise'\n")
if(is.na(type2))
cat("No constraints on bkg(r) behaviour included. \n")
else if(type2=="gaussianProcess"){
matrix.FT2 <- sineFT.matrix(Q=data$x, r=r2)
K <- covMatrixSE(x=r2, sig=sigma.f, l=l)
ff <- K$factor
K <- K$cov
K.DI <- covMatrix.DI(K)
}
else if(type2=="secondDeriv"){
matrix.FT2 <- sineFT.matrix(Q=data$x, r=r2)
D <- DMatrix(knots.x=r2)$matrix
}
else
stop("Wrong type of low-r2 condition. Should be either 'gaussianProcess' or 'secondDeriv'\n")
cat("...done! \n")
data$Gr <- list(type1=type1, type2=type2, sigma.r=sigma.r, bkg.r=bkg.r,
matrix.FT1=matrix.FT1, matrix.FT2=matrix.FT2, KG.inv=KG.inv, D=D,
covMatrix=list(inv=K.DI$inv, det=K.DI$det, factor=ff), rho.0=rho.0)
return(data)
}
###
write.fit.results <- function(fit.results, file = stop("'file' must be specified")){
x <- fit.results$x
y <- fit.results$curves$y - fit.results$curves$bkg
SB <- fit.results$curves$SB
bkg <- fit.results$curves$bkg
if(length(fit.results$uncrt)>1)
stdev <- fit.results$uncrt$stdev
else
stdev <- rep(NA, length(x))
scale <- fit.results$scale
f <- fit.results$fit.details$scatter.length
N <- fit.results$fit.details$n.atoms
DW <- fit.results$DW
if(is.null(f)) f <- NA
if(is.null(N)) N <- NA
if(is.null(DW)) DW <- NA
m <- cbind(f, N, DW)
exp.data <- (y-SB)/scale + bkg + SB
res <- cbind(x, y, stdev, SB, exp.data)
knots.x <- fit.results$knots$x
knots.y <- fit.results$knots$y
knots <- cbind(knots.x, knots.y)
knots <- format(knots,digits=6)
options(warn=-1)
write(c("# scale factor:", scale), file=file, append=FALSE)
cat("\n", file=file, append=TRUE)
write(c("# Debye-Waller factors:"), file=file, append=TRUE)
write.table(m, file=file, append=TRUE, col.names=c("f","N","DW"), row.names=FALSE, quote=FALSE)
cat("\n", file=file, append=TRUE)
write(c("# knots positions:"), file=file, append=TRUE)
write.table(knots, file=file, append=TRUE, col.names=TRUE, row.names=FALSE, quote=FALSE, sep="\t")
cat("\n", file=file, append=TRUE)
cat("############################################################## \n", file=file, append=TRUE)
cat("# fit results \n", file=file, append=TRUE)
cat("# columns: x; (scaled) y; standard deviation in y due to noise and bkg uncertainty; coherent baseline; estimated background; raw data \n", file=file, append=TRUE)
write.table(res, file=file, append=TRUE, col.names=TRUE, row.names=FALSE, quote=FALSE, sep="\t")
options(warn=0)
}
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
length(list(list())[[1]])
runApp("app")
load("C:/Users/ang2/SkyDrive/!NIST!/Projects/R_projects/shiny/app/saveTo.RData")
pp
pp[[1]]$x
pp[[1]]$
x
pp[[2]]
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
?shiny
runApp("app")
runApp("app")
runApp("app")
runApp("app")
fileInput()
fileInput
fileInput
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
fileInput
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
Sys.sleep(1)
Sys.sleep(1)
runApp("app")
runApp("app")
runApp("app")
library(ggplot2)
library(reshape)
library(reshape2)
library(gridExtra)
runApp("app")
runApp("app")runApp
runApp("app")
runApp("app")
runApp("app")
runApp("app")
runApp("app")
devtools::install_github("rmdexamples", "rstudio")
install.packages("devtools")
devtools::install_github("rmdexamples", "rstudio")
library("devtools")
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("n", "Bins", 5, 100, 20)),
mainPanel(plotOutput("hist"))
)
),
server = function(input, output) {
output$hist <- renderPlot(
hist(faithful[[2]], breaks = input$n,
col = "skyblue", border = "white")
)
}
)
library(BBEST)
library(BBEST)
library(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("n", "Bins", 5, 100, 20)),
mainPanel(plotOutput("hist"))
)
),
server = function(input, output) {
output$hist <- renderPlot(
hist(faithful[[2]], breaks = input$n,
col = "skyblue", border = "white")
)
}
)
shinyApp <- function (ui, server, onStart = NULL, options = list(), uiPattern = "/")
{
uiPattern <- sprintf("^%s$", uiPattern)
httpHandler <- function(req) {
if (!identical(req$REQUEST_METHOD, "GET"))
return(NULL)
if (!isTRUE(grepl(uiPattern, req$PATH_INFO)))
return(NULL)
textConn <- textConnection(NULL, "w")
on.exit(close(textConn))
uiValue <- if (is.function(ui)) {
if (length(formals(ui)) > 0)
ui(req)
else ui()
}
else {
ui
}
if (is.null(uiValue))
return(NULL)
renderPage(uiValue, textConn)
html <- paste(textConnectionValue(textConn), collapse = "\n")
return(httpResponse(200, content = enc2utf8(html)))
}
serverFuncSource <- function() {
server
}
structure(list(httpHandler = httpHandler, serverFuncSource = serverFuncSource,
onStart = onStart, options = options), class = "shiny.appobj")
}
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("n", "Bins", 5, 100, 20)),
mainPanel(plotOutput("hist"))
)
),
server = function(input, output) {
output$hist <- renderPlot(
hist(faithful[[2]], breaks = input$n,
col = "skyblue", border = "white")
)
}
)
library(BBEST)
library(shiny)
runApp("app")
whatIsSpecified <- function(data){
N <- length(data)
res <- list()
for(i in 1:N){
res[[i]] <- list()
res[[i]]$x <- TRUE
res[[i]]$y <- TRUE
res[[i]]$lambda <- TRUE
res[[i]]$sigma <- TRUE
res[[i]]$SB <- TRUE
res[[i]]$smoothed <- TRUE
if( is.null(data[[i]]$x) || any(is.na(data[[i]]$x)) ||  !any(data[[i]]$x!=0) )
res[[i]]$x <- FALSE
if( is.null(data[[i]]$y) || any(is.na(data[[i]]$y)) ||  !any(data[[i]]$y!=0) )
res[[i]]$y <- FALSE
if( is.null(data[[i]]$lambda) || any(is.na(data[[i]]$lambda)) ||  !any(data[[i]]$lambda!=0) )
res[[i]]$lambda <- FALSE
if( is.null(data[[i]]$sigma) || any(is.na(data[[i]]$sigma)) ||  !any(data[[i]]$sigma!=0) )
res[[i]]$sigma <- FALSE
if( is.null(data[[i]]$SB) || any(is.na(data[[i]]$SB)) ||  !any(data[[i]]$SB!=0) )
res[[i]]$SB <- FALSE
if( is.null(data[[i]]$smoothed) || any(is.na(data[[i]]$smoothed)) ||  !any(data[[i]]$smoothed!=0) )
res[[i]]$smoothed <- FALSE
}
return(res)
}
?rmdexamples
?
?rmdexamples
runApp("app")
runApp("app",launch.browser = TRUE)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("n", "Bins", 5, 100, 20)),
mainPanel(plotOutput("hist"))
)
),
server = function(input, output) {
output$hist <- renderPlot(
hist(faithful[[2]], breaks = input$n,
col = "skyblue", border = "white")
)
}
)
library(shiny)
runApp("app3")
runApp("app3", launch.browser = TRUE)
runApp("K-means/", launch.browser = TRUE)
library(BBEST)
runApp("K-means/", launch.browser = TRUE)
library(shiny)
runApp("K-means/", launch.browser = TRUE)
runApp("K-means", launch.browser = TRUE)
runApp("K-means", launch.browser = TRUE)
a = if(TRUE){44} else{55}
a
a = if(a==44){44} else{55}
a
a = if(a==55){44} else{55}
a
a = if(a==55){44} else{55}
a
a = if(a==55){44} else{55}
?ggsave
5/(3.992^2*4.036)
knots.x <- seq(0, 3, length=6)
knots.x <- c(knots.x, seq(5, max(dat$x), length=7))
knots.x
knots.x <- seq(0, 3, length=6)
knots.x <- c(knots.x, seq(5, 22, length=7))
knots.x
library(shiny)
runApp("K-means")
runApp("K-means")
runApp("K-means")
runApp("app4/")
runApp("app4")
runApp("app4")
runApp("app4")
runApp("app4")
runApp("app4")
runApp("app4")
runApp("app4")
runApp("app4")
runApp("app4")
ret_series <- c(1, 2, 3);
x <- "ret_series";
x
get(x)
get(NULL)
get(A$f)
is.object(a$r)
is.object(a)
runApp("app4")
runApp("app4")
runApp("app4")
eval(as.name(x))
eval(as.name("a"))
eval(as.name("a$rr"))
eval(as.symbol("a$rr"))
as.name("a$rr")
is.null(as.name("a$rr"))
is.NA(as.name("a$rr"))
is.number(as.name("a$rr"))
is.object(as.name("a$rr"))
a <- list(g=2)
is.object(as.name("a$rr"))
a <- list(g=2, rr=44)
is.object(as.name("a$rr"))
a
a$rr
eval(as.symbol("a$rr"))
eval(as.name("a$rr"))
eval(as.name("a"))
is.object(as.name("rr"))
is.object(as.name("a"))
eval(as.name("arr"))
is.object(as.name("a"))
is.object(as.symbol("a"))
get()
get
is.double(1)
a
a ,- 44
a <- 44
is.double(a)
is.double(NULL)
is.double(as.symbol("a"))
is.double(as.name("a"))
is.double(as.name("arr"))
as.name("arr")
is.double(get("arr"))
is.double(arr)
exists("a")
exists("asd")
x
exists(x)
x <- "fff"
exists(x)
fff <- 44
exists(x)
runApp("app4")
runApp("app4")
runApp("app4")
matrix(c(1,1,2,3), 2, 2, byrow = TRUE)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,2))
x<-seq(0,1,0.01)
y <- x^2
plot(x,y,t="l")
plot(x,y,t="l", col=2)
plot(x,y,t="l", col=3)
?selectInput
library(shiny)
runApp("K-means")
runApp("K-means")
runApp("K-means")
0.012204617467624891^2*2
0.013398629769993054^2
0.0002979054+ 0.0001795233
sqrt(0.0004774287)
runApp("K-means")
norm
iso
iso <- function(x1,x2){
sqrt(2*x1^2+x2^2)
}
iso(0.01207529598025475, 0.014777189738321915)
iso(0.02, 0.005)
iso(0.01372449257206235, 0.011315550047206059)
iso(0.0073781923647666635, 0.026609019099403258)
iso(0.02, 0.005)
iso(0.017095371272975543, 0.011543557956210029)
iso(0.018308632777074674, 0.004685398271164716)
iso(0.018308632777074674, 0.004685398271164716)
iso(0.01506432,  0.01436423)
iso(0.021494219499866556, 0.0033129339184444109)
iso(0.0085073182472109304, 0.02845863023948339)
2066399*2066399
iso(0.011578445688859039, 0.021815451481512326)
runApp("K-means")
runApp("K-means")
library(shiny)
runApp("K-means")
runApp("K-means")
runApp("K-means")
dat <- read.csv(file="fit.txt", header = TRUE, sep = "\t")
dat
dat <- read.csv(file="fit.txt", header = TRUE, sep = "\t")
dat
dat <- read.csv(file="fit.txt", header = TRUE, sep = " ")
dat
dat <- read.csv(file="fit.txt", header = TRUE, sep = " ")
dat
runApp("K-means")
dat[, c(input$xcol, input$ycol)]
runApp("K-means")
runApp("K-means2")
runApp("K-means")
runApp("K-means")
runApp("K-means")
dat <- read.csv(file="fit.txt", header = TRUE, sep = " ")
dat
dat <- read.csv(file="fit.txt", header = TRUE, sep = " ")
dat
runApp("K-means")
runApp("K-means")
runApp("K-means")
library(shiny)
runApp(budg)
runApp("budg")
runApp("budg", launch.browser = TRUE)
library(shinyapps)
setwd("budg/")
deployApp()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library(shinyapps)
deployApp()
setwd("C:/Users/ang2/SkyDrive/!NIST!/Projects/R_projects/BBEST/inst/gui")
deployApp()
